generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  phone          String?        @unique
  password       String
  role           Role           @default(USER)
  createdAt      DateTime       @default(now())

  legalQuestions LegalQuestion[]
  farmEntries    FarmEntry[]
  donations      Donation[]
  projects       Project[]      @relation("ProjectCreator")
  notifications  Notification[]
  legalThreads   LegalThread[]
  aiUsages       AIUsage[]
  
  // Bantu Desa Relations
  kegiatanDesa   KegiatanDesa[] @relation("KegiatanCreator")
  donasiDesa     DonasiDesa[]   @relation("DonasiDonor")
  verifiedDonasi DonasiDesa[]   @relation("DonasiVerifier")
}

enum Role {
  USER
  ADMIN
  PETANI
  LEGAL_HELPER
}

// === BANTU DESA MODELS ===

model KegiatanDesa {
  id              String            @id @default(uuid())
  creator         User              @relation(name: "KegiatanCreator", fields: [creatorId], references: [id])
  creatorId       String
  judul           String
  deskripsi       String
  foto_url        String?
  target_dana     Int
  tanggal_mulai   DateTime
  tanggal_selesai DateTime
  jadwal          String?           // JSON string untuk array jadwal
  persyaratan     String?           // JSON string untuk object persyaratan
  galeri          String?           // JSON string untuk array URL gambar
  qris_url        String?           // URL QR Code untuk pembayaran
  status          KegiatanStatus    @default(AKTIF)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  donations       DonasiDesa[]
}

enum KegiatanStatus {
  AKTIF
  SELESAI
  DIBATALKAN
}

model DonasiDesa {
  id                  String        @id @default(uuid())
  kegiatan            KegiatanDesa  @relation(fields: [kegiatanId], references: [id], onDelete: Cascade)
  kegiatanId          String
  donor               User?         @relation(name: "DonasiDonor", fields: [donorId], references: [id])
  donorId             String?       // Null jika donasi anonymous tanpa login
  donorName           String?       // Nama donatur (untuk yang login atau isi manual)
  donorEmail          String?       // Email donatur
  donorPhone          String?       // Phone donatur
  amount              Int
  isAnonymous         Boolean       @default(false)
  message             String?       // Pesan dari donatur
  bukti_transfer_url  String        // URL bukti transfer
  status              DonasiStatus  @default(PENDING)
  reference           String        @unique // Kode referensi unik
  verifiedAt          DateTime?
  verifiedBy          String?
  verifier            User?         @relation(name: "DonasiVerifier", fields: [verifiedBy], references: [id])
  adminNote           String?       // Catatan admin saat verifikasi
  createdAt           DateTime      @default(now())
}

enum DonasiStatus {
  PENDING
  APPROVED
  REJECTED
}

// === EXISTING MODELS (tidak berubah) ===

model LegalQuestion {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   String
  aiResponse String
  category   String?
  createdAt  DateTime @default(now())
}

model LegalThread {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  title     String?
  createdAt DateTime       @default(now())

  messages  LegalMessage[]
}

model LegalMessage {
  id        String       @id @default(uuid())
  thread    LegalThread  @relation(fields: [threadId], references: [id])
  threadId  String
  sender    SenderType
  message   String
  createdAt DateTime     @default(now())
}

enum SenderType {
  USER
  AI
}

model FarmEntry {
  id                  String        @id @default(uuid())
  user                User          @relation(fields: [userId], references: [id])
  userId              String
  plantType           String
  location            String
  plantedAt           DateTime
  expectedHarvestDate DateTime?
  createdAt           DateTime      @default(now())

  advices             FarmAdvice[]
  analysis            FarmAnalysis?
}

model FarmAdvice {
  id           String     @id @default(uuid())
  farmEntry    FarmEntry  @relation(fields: [farmEntryId], references: [id])
  farmEntryId  String
  type         String     // e.g., watering, weather_alert
  adviceText   String
  createdAt    DateTime   @default(now())
}

model FarmAnalysis {
  id           String     @id @default(uuid())
  farmEntry    FarmEntry  @relation(fields: [farmEntryId], references: [id])
  farmEntryId  String     @unique
  harvestDate  DateTime
  steps        String[]   // List panduan AI
  risks        String[]   // List risiko AI
  createdAt    DateTime   @default(now())
}

model WeatherForecast {
  id          String   @id @default(uuid())
  location    String
  date        DateTime
  forecast    String
  temperature Int
  humidity    Int
  windSpeed   Int
  createdAt   DateTime @default(now())

  @@unique([location, date], name: "location_date")
}

model Project {
  id            String         @id @default(uuid())
  creator       User           @relation(name: "ProjectCreator", fields: [creatorId], references: [id])
  creatorId     String
  title         String
  description   String
  imageUrl      String?
  targetAmount  Int
  currentAmount Int            @default(0)
  deadline      DateTime
  status        ProjectStatus  @default(OPEN)
  createdAt     DateTime       @default(now())

  donations     Donation[]
}

enum ProjectStatus {
  OPEN
  CLOSED
  COMPLETED
}

model Donation {
  id               String        @id @default(uuid())
  donor            User          @relation(fields: [donorId], references: [id])
  donorId          String
  project          Project       @relation(fields: [projectId], references: [id])
  projectId        String
  amount           Int
  paymentMethod    PaymentMethod
  paymentStatus    PaymentStatus
  paymentReference String?
  proofUrl         String?
  createdAt        DateTime      @default(now())
}

enum PaymentMethod {
  QRIS
  GOPAY
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Notification {
  id         String             @id @default(uuid())
  user       User               @relation(fields: [userId], references: [id])
  userId     String
  title      String
  message    String
  type       NotificationType
  readStatus Boolean            @default(false)
  createdAt  DateTime           @default(now())
}

enum NotificationType {
  HUKUM
  FARM
  DONATION
}

model AIUsage {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @default(now())
  count     Int      @default(1)

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}